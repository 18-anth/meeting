{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\antho\\\\Desktop\\\\prueba\\\\src\\\\components\\\\pages\\\\components\\\\LibrarySong.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction LibrarySong({\n  song,\n  songs,\n  setCurrentSong,\n  id,\n  audioRef,\n  isPlaying,\n  setSongs\n}) {\n  const songSelectHandler = async () => {\n    const selectedSong = songs.filter(state => state.id === id);\n    await setCurrentSong(selectedSong[0]); //Add active state\n\n    const newSongs = songs.map(song => {\n      if (song.id === id) {\n        return { ...song,\n          active: true\n        };\n      } else {\n        return { ...song,\n          active: false\n        };\n      }\n    });\n    setSongs(newSongs); //check song is playing\n\n    if (isPlaying) audioRef.current.play();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onClick: songSelectHandler,\n    className: `library-song ${song.active ? \"selected\" : \"\"}`,\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      alt: song.name,\n      src: song.cover\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"song-description\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: song.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: song.artist\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\n\n_c = LibrarySong;\nexport default LibrarySong;\n\nvar _c;\n\n$RefreshReg$(_c, \"LibrarySong\");","map":{"version":3,"sources":["C:/Users/antho/Desktop/prueba/src/components/pages/components/LibrarySong.js"],"names":["React","LibrarySong","song","songs","setCurrentSong","id","audioRef","isPlaying","setSongs","songSelectHandler","selectedSong","filter","state","newSongs","map","active","current","play","name","cover","artist"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,SAASC,WAAT,CAAqB;AACnBC,EAAAA,IADmB;AAEnBC,EAAAA,KAFmB;AAGnBC,EAAAA,cAHmB;AAInBC,EAAAA,EAJmB;AAKnBC,EAAAA,QALmB;AAMnBC,EAAAA,SANmB;AAOnBC,EAAAA;AAPmB,CAArB,EAQG;AACD,QAAMC,iBAAiB,GAAG,YAAY;AACpC,UAAMC,YAAY,GAAGP,KAAK,CAACQ,MAAN,CAAcC,KAAD,IAAWA,KAAK,CAACP,EAAN,KAAaA,EAArC,CAArB;AACA,UAAMD,cAAc,CAACM,YAAY,CAAC,CAAD,CAAb,CAApB,CAFoC,CAGpC;;AACA,UAAMG,QAAQ,GAAGV,KAAK,CAACW,GAAN,CAAWZ,IAAD,IAAU;AACnC,UAAIA,IAAI,CAACG,EAAL,KAAYA,EAAhB,EAAoB;AAClB,eAAO,EACL,GAAGH,IADE;AAELa,UAAAA,MAAM,EAAE;AAFH,SAAP;AAID,OALD,MAKO;AACL,eAAO,EACL,GAAGb,IADE;AAELa,UAAAA,MAAM,EAAE;AAFH,SAAP;AAID;AACF,KAZgB,CAAjB;AAaAP,IAAAA,QAAQ,CAACK,QAAD,CAAR,CAjBoC,CAkBpC;;AACA,QAAIN,SAAJ,EAAeD,QAAQ,CAACU,OAAT,CAAiBC,IAAjB;AAChB,GApBD;;AAqBA,sBACE;AACE,IAAA,OAAO,EAAER,iBADX;AAEE,IAAA,SAAS,EAAG,gBAAeP,IAAI,CAACa,MAAL,GAAc,UAAd,GAA2B,EAAG,EAF3D;AAAA,4BAIE;AAAK,MAAA,GAAG,EAAEb,IAAI,CAACgB,IAAf;AAAqB,MAAA,GAAG,EAAEhB,IAAI,CAACiB;AAA/B;AAAA;AAAA;AAAA;AAAA,YAJF,eAKE;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA,8BACE;AAAA,kBAAKjB,IAAI,CAACgB;AAAV;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,kBAAKhB,IAAI,CAACkB;AAAV;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YALF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAYD;;KA1CQnB,W;AA4CT,eAAeA,WAAf","sourcesContent":["import React from \"react\";\r\n\r\nfunction LibrarySong({\r\n  song,\r\n  songs,\r\n  setCurrentSong,\r\n  id,\r\n  audioRef,\r\n  isPlaying,\r\n  setSongs,\r\n}) {\r\n  const songSelectHandler = async () => {\r\n    const selectedSong = songs.filter((state) => state.id === id);\r\n    await setCurrentSong(selectedSong[0]);\r\n    //Add active state\r\n    const newSongs = songs.map((song) => {\r\n      if (song.id === id) {\r\n        return {\r\n          ...song,\r\n          active: true,\r\n        };\r\n      } else {\r\n        return {\r\n          ...song,\r\n          active: false,\r\n        };\r\n      }\r\n    });\r\n    setSongs(newSongs);\r\n    //check song is playing\r\n    if (isPlaying) audioRef.current.play();\r\n  };\r\n  return (\r\n    <div\r\n      onClick={songSelectHandler}\r\n      className={`library-song ${song.active ? \"selected\" : \"\"}`}\r\n    >\r\n      <img alt={song.name} src={song.cover} />\r\n      <div className=\"song-description\">\r\n        <h3>{song.name}</h3>\r\n        <h4>{song.artist}</h4>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LibrarySong;\r\n"]},"metadata":{},"sourceType":"module"}