{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\antho\\\\Desktop\\\\prueba\\\\src\\\\components\\\\pages\\\\Musica.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from \"react\";\nimport Song from \"./components/Song\";\nimport Player from \"./components/Player\";\nimport \"./css/sty\";\nimport data from \"./data\";\nimport Library from \"./components/Library\";\nimport Nav from \"./components/Nav\";\nimport Time from \"./components/Time\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Musica = () => {\n  _s();\n\n  const [volume, setVolume] = useState(0.5);\n  const [songs, setSongs] = useState(data());\n  const [currentSong, setCurrentSong] = useState(songs[0]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [songInfo, setSongInfo] = useState({\n    currentTime: 0,\n    duration: 0,\n    animationPercentage: 0\n  });\n  const [libraryStatus, setLibraryStatus] = useState(false);\n  const [timeStatus, setTimeStatus] = useState(false);\n\n  const timeUpdateHandler = e => {\n    const current = e.target.currentTime;\n    const duration = e.target.duration;\n    const roundedCurrent = Math.round(current);\n    const roundedDuration = Math.round(duration);\n    const animation = Math.round(roundedCurrent / roundedDuration * 100);\n    setSongInfo({ ...songInfo,\n      currentTime: current,\n      duration,\n      animationPercentage: animation\n    });\n  };\n\n  const audioRef = useRef(null);\n\n  const songEndHandler = async () => {\n    let currentIndex = songs.findIndex(song => song.id === currentSong.id);\n    await setCurrentSong(songs[(currentIndex + 1) % songs.length]);\n    if (isPlaying) audioRef.current.play();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `App ${libraryStatus ? \"library-active\" : \"\"} ${timeStatus ? \"timer-active\" : \"\"}`,\n    children: [/*#__PURE__*/_jsxDEV(Nav, {\n      libraryStatus: libraryStatus,\n      setLibraryStatus: setLibraryStatus,\n      timeStatus: timeStatus,\n      setTimeStatus: setTimeStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Song, {\n      currentSong: currentSong\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Player, {\n      audioRef: audioRef,\n      setIsPlaying: setIsPlaying,\n      isPlaying: isPlaying,\n      currentSong: currentSong,\n      setSongInfo: setSongInfo,\n      songInfo: songInfo,\n      songs: songs,\n      setCurrentSong: setCurrentSong,\n      setSongs: setSongs,\n      volume: volume,\n      setVolume: setVolume\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Time, {\n      timeStatus: timeStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Library, {\n      audioRef: audioRef,\n      songs: songs,\n      setCurrentSong: setCurrentSong,\n      isPlaying: isPlaying,\n      setSongs: setSongs,\n      libraryStatus: libraryStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n      onTimeUpdate: timeUpdateHandler,\n      onLoadedMetadata: timeUpdateHandler,\n      ref: audioRef,\n      src: currentSong.audio,\n      onEnded: songEndHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Musica, \"/tLoxT0LSqoSnczfcV1lL07scFw=\");\n\n_c = Musica;\nexport default Musica;\n\nvar _c;\n\n$RefreshReg$(_c, \"Musica\");","map":{"version":3,"sources":["C:/Users/antho/Desktop/prueba/src/components/pages/Musica.js"],"names":["React","useState","useRef","Song","Player","data","Library","Nav","Time","Musica","volume","setVolume","songs","setSongs","currentSong","setCurrentSong","isPlaying","setIsPlaying","songInfo","setSongInfo","currentTime","duration","animationPercentage","libraryStatus","setLibraryStatus","timeStatus","setTimeStatus","timeUpdateHandler","e","current","target","roundedCurrent","Math","round","roundedDuration","animation","audioRef","songEndHandler","currentIndex","findIndex","song","id","length","play","audio"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from \"react\";\r\nimport Song from \"./components/Song\";\r\nimport Player from \"./components/Player\";\r\nimport \"./css/sty\";\r\nimport data from \"./data\";\r\nimport Library from \"./components/Library\";\r\nimport Nav from \"./components/Nav\";\r\nimport Time from \"./components/Time\";\r\n\r\nconst Musica = () => {\r\n  const [volume, setVolume] = useState(0.5);\r\n  const [songs, setSongs] = useState(data());\r\n  const [currentSong, setCurrentSong] = useState(songs[0]);\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n  const [songInfo, setSongInfo] = useState({\r\n    currentTime: 0,\r\n    duration: 0,\r\n    animationPercentage: 0,\r\n  });\r\n  const [libraryStatus, setLibraryStatus] = useState(false);\r\n  const [timeStatus, setTimeStatus] = useState(false);\r\n  const timeUpdateHandler = (e) => {\r\n    const current = e.target.currentTime;\r\n    const duration = e.target.duration;\r\n    const roundedCurrent = Math.round(current);\r\n    const roundedDuration = Math.round(duration);\r\n    const animation = Math.round((roundedCurrent / roundedDuration) * 100);\r\n\r\n    setSongInfo({\r\n      ...songInfo,\r\n      currentTime: current,\r\n      duration,\r\n      animationPercentage: animation,\r\n    });\r\n  };\r\n  const audioRef = useRef(null);\r\n  const songEndHandler = async () => {\r\n    let currentIndex = songs.findIndex((song) => song.id === currentSong.id);\r\n    await setCurrentSong(songs[(currentIndex + 1) % songs.length]);\r\n    if (isPlaying) audioRef.current.play();\r\n  };\r\n  return (\r\n    <div\r\n      className={`App ${libraryStatus ? \"library-active\" : \"\"} ${\r\n        timeStatus ? \"timer-active\" : \"\"\r\n      }`}\r\n    >\r\n      <Nav\r\n        libraryStatus={libraryStatus}\r\n        setLibraryStatus={setLibraryStatus}\r\n        timeStatus={timeStatus}\r\n        setTimeStatus={setTimeStatus}\r\n      />\r\n      <Song currentSong={currentSong} />\r\n      <Player\r\n        audioRef={audioRef}\r\n        setIsPlaying={setIsPlaying}\r\n        isPlaying={isPlaying}\r\n        currentSong={currentSong}\r\n        setSongInfo={setSongInfo}\r\n        songInfo={songInfo}\r\n        songs={songs}\r\n        setCurrentSong={setCurrentSong}\r\n        setSongs={setSongs}\r\n        volume={volume}\r\n        setVolume={setVolume}\r\n      />\r\n      <Time timeStatus={timeStatus} />\r\n      <Library\r\n        audioRef={audioRef}\r\n        songs={songs}\r\n        setCurrentSong={setCurrentSong}\r\n        isPlaying={isPlaying}\r\n        setSongs={setSongs}\r\n        libraryStatus={libraryStatus}\r\n      />\r\n      <audio\r\n        onTimeUpdate={timeUpdateHandler}\r\n        onLoadedMetadata={timeUpdateHandler}\r\n        ref={audioRef}\r\n        src={currentSong.audio}\r\n        onEnded={songEndHandler}\r\n      ></audio>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Musica;\r\n"]},"metadata":{},"sourceType":"module"}